#!/usr/bin/env bash
##  ┌──────────────────────────────────────────────────────────────────┐
##  │  ____    _    ____  _   _           _____ ___ _     _____ ____   │
##  │ | __ )  / \  / ___|| | | |         |  ___|_ _| |   | ____/ ___|  │
##  │ |  _ \ / _ \ \___ \| |_| |  _____  | |_   | || |   |  _| \___ \  │
##  │ | |_) / ___ \ ___) |  _  | |_____| |  _|  | || |___| |___ ___) | │
##  │ |____/_/   \_\____/|_| |_|         |_|   |___|_____|_____|____/  │
##  │                                                                  │
##  └──────────────────────────────────────────────────────────────────┘
##  ------------------------------------------------------------------------  ##
##                               Bash Options                                 ##
##  ------------------------------------------------------------------------  ##

TZ='UTC+0'; export TZ

##  ------------------------------------------------------------------------  ##
##                              Some settings                                 ##
##  ------------------------------------------------------------------------  ##

#set -o nounset     # These  two options are useful for debugging
#set -o xtrace

ulimit -S -c 0      # Don't want coredumps
set -o notify
set -o noclobber
set -o ignoreeof

# Enable options:
#shopt -s cdspell
#shopt -s cdable_vars
#shopt -s checkhash
#shopt -s sourcepath
#shopt -s no_empty_cmd_completion

# Disable options:
#shopt -u mailwarn
#unset MAILCHECK        # Don't want my shell to warn me of incoming mail

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# append to the history file, don't overwrite it
shopt -s cmdhist
shopt -s histappend histreedit histverify
# shopt -s histappend

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=20000
# HISTFILESIZE=20000

#export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n'
#export HISTTIMEFORMAT="%F %T %Z"
HISTIGNORE="&:bg:fg:ll:h:c:ii:qq:zz"
# HISTTIMEFORMAT="[$(echo -e ${White})%F %T %Z$(echo -e ${NC})] "

# Put a list of remote hosts in ~/.hosts
HOSTFILE=$HOME/.hosts

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color)
    color_prompt=yes
  ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = "yes" ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
  xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;

  *)
  ;;
esac


##  ------------------------------------------------------------------------  ##
##                              Tailoring 'less'                              ##
##  ------------------------------------------------------------------------  ##
#export PAGER=less
#export LESSCHARSET='latin1'
#export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'
# Use this if lesspipe.sh exists.
#export LESS='-i -N -w  -z-4 -g -e -M -X -F -R -P%t?f%f \
#           :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'

##  LESS man page colors (makes Man pages more readable).
#export LESS_TERMCAP_mb=$'\E[01;31m'
#export LESS_TERMCAP_md=$'\E[01;31m'
#export LESS_TERMCAP_me=$'\E[0m'
#export LESS_TERMCAP_se=$'\E[0m'
#export LESS_TERMCAP_so=$'\E[01;44;33m'
#export LESS_TERMCAP_ue=$'\E[0m'
#export LESS_TERMCAP_us=$'\E[01;32m'

##  ------------------------------------------------------------------------  ##
##  Shell Prompt - for many examples, see:
##       http://www.debian-administration.org/articles/205
##       http://www.askapache.com/linux/bash-power-prompt.html
##       http://tldp.org/HOWTO/Bash-Prompt-HOWTO
##       https://github.com/nojhan/liquidprompt
##  ------------------------------------------------------------------------  ##
# Current Format: [TIME USER@HOST PWD] >
# TIME:
#    Green     == machine load is low
#    Orange    == machine load is medium
#    Red       == machine load is high
#    ALERT     == machine load is very high
# USER:
#    Cyan      == normal user
#    Orange    == SU to user
#    Red       == root
# HOST:
#    Cyan      == local session
#    Green     == secured remote connection (via ssh)
#    Red       == unsecured remote connection
# PWD:
#    Green     == more than 10% free disk space
#    Orange    == less than 10% free disk space
#    ALERT     == less than 5% free disk space
#    Red       == current user does not have write privileges
#    Cyan      == current filesystem is size zero (like /proc)
# >:
#    White     == no background or suspended jobs in this shell
#    Cyan      == at least one background job in this shell
#    Orange    == at least one suspended job in this shell
#
#    Command is added to the history file each time you hit enter,
#    so it's available to all shells (using 'history -a')


##  Test connection type:
if [ -n "${SSH_CONNECTION}" ]; then
  CNX=${Green}        # Connected on remote machine, via ssh (good)
elif [[ "${DISPLAY%%:0*}" != "" ]]; then
  CNX=${ALERT}        # Connected on remote machine, not via ssh (bad)
else
  CNX=${Cyan}         # Connected on local machine
fi

##  Test user type:
if [[ ${USER} == "root" ]]; then
  SU=${Red}          # User is root
elif [[ ${USER} != $(logname) ]]; then
  SU=${Red}          # User is not login user
else
  SU=${Cyan}         # User is normal (well ... most of us are)
fi

NCPU=$(grep -c 'processor' /proc/cpuinfo)   # Number of CPUs
SLOAD=$(( 100*${NCPU} ))                    # Small load
MLOAD=$(( 200*${NCPU} ))                    # Medium load
XLOAD=$(( 400*${NCPU} ))                    # Xlarge load

##  Adds some text in the terminal frame (if applicable)

##  Now we construct the prompt
PROMPT_COMMAND="history -a"

#case ${TERM} in
#  *term | rxvt | linux)
#        # Time of day (with load info):
#        #PS1="\[\$(load_color)\][\A\[${NC}\] "
#        # User@Host (with connection type info):
#        #PS1=${PS1}"\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h\[${NC}\] "
#        PS1="[\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h\[${NC}\] "
#        # PWD (with 'disk space' info):
#        PS1=${PS1}"\[\$(disk_color)\]\W]\[${NC}\]: "
#        # Prompt (with 'job' info):
#        #PS1=${PS1}"\[\$(job_color)\]>\[${NC}\] "
#        # Set title of current xterm:
#        #PS1=${PS1}"\[\e]0;\][\u@\h] \w\a\]"
#        #PS1=${PS1}"\w\a\]"
#        ;;
#    *)
#        #PS1="(\A \u@\h \W) > " # --> PS1="(\A \u@\h \w) > "
#        PS1="(\A) : " # --> PS1="(\A \u@\h \w) > "
#                               # --> Shows full pathname of current dir.
#        ;;
#esac
